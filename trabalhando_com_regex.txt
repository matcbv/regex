Toda a expressão regular (regex) vem contida entre barras (/). Junto delas, podemos utilizar modificadores que alteram o comportamento de sua buca.

------------ Modificadores ------------ 

- g (global): Busca todas as ocorrências na string, não apenas a primeiras.
- i (ignore case): Ignora a diferença entre maiúsculas e minúsculas durante a busca.
- m (multiline): Trata a string como múltiplas linhas.
- s (dotAll): 


Em uma expressão regular, podemos incluir todos os caracteres através do dígito ponto (.); Ex.:

  /o./

  Está é uma frase de exemplo // O último o não será selecionado pois há uma quebra de linha.
	
  Uma nova frase em outra linha. // Já aqui, 'ov' e 'ou' serão selecionados.

No exemplo acima, serão selecionadas todas as sequência do caractere A junto a qualquer outro, exceto aqueles que estiverem em próximas linhas.


------------ Operador OR ------------

Podemos adicionar opções para nossa busca através do símbolo |. Ex.:

  /e|é/

O exemplo acima irá selecionar tanto o carcter 'e' quanto 'é'.


------------ Conjuntos ------------ 

Podemos também especificar um conjunto de caracteres com colchetes ([]). Ex.:

  /[abc]/

O exemplo acima irá buscar por cada um dos caracteres do conjunto individualmente.


------------ Criando sequências com conjuntos ------------ 

Podemos criar uma sequência em nossos conjuntos utilizando o traço (-). Ex.:

  /[a-b]/ ou /[0-9]/


------------ Negação com conjuntos ------------

Para realizarmos uma busca de negação, utilizamos o símbolo de circunflexo (^). Ex.:


//


------------ Diferença entre | e [ ] ------------

A diferença entre o uso do operador OR e dos conjuntos é o fato do operador OR trabalhar com padrões. Já os colchetes trabalham com caracteres únicos. Ex.:

  /abc|cba/ -> Serão selecionadas as strings 'abc' e 'cba'.

  [abc] -> Serão selecionados os caracteres 'a', 'b' e 'c'.